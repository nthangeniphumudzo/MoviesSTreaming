/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface SigninRequestPayload {
  username: string;
  password: string;
}

export type UserType = "CUSTOMER" | "ADMINISTRATOR";

export interface AccessToken {
  value: string;
  expiry: string;
  type: UserType;
}

export interface SignupRequestPayload {
  email: string;
  phoneNumber: string;
  username: string;
  password: string;
}

export interface Multimedia {
  imageName?: string | null;
  imageData?: string | null;
  videoName?: string | null;
  videoData?: string | null;
}

export interface Video {
  id?: number;
  name?: string | null;
  category?: string | null;
  videoPath?: string | null;
  imagePath?: string | null;
}

export interface Account {
  id?: string | null;
  userName?: string | null;
  normalizedUserName?: string | null;
  email?: string | null;
  normalizedEmail?: string | null;
  emailConfirmed?: boolean;
  passwordHash?: string | null;
  securityStamp?: string | null;
  concurrencyStamp?: string | null;
  phoneNumber?: string | null;
  phoneNumberConfirmed?: boolean;
  twoFactorEnabled?: boolean;
  lockoutEnd?: string | null;
  lockoutEnabled?: boolean;
  accessFailedCount?: number;
}

export interface VideoComment {
  id?: number;
  target?: Video | null;
  account?: Account | null;
  text?: string | null;
}

export type SigninSigninProps = Omit<MutateProps<AccessToken, string[], void, SigninRequestPayload>, "path" | "verb">;

export const SigninSignin = (props: SigninSigninProps) => (
  <Mutate<AccessToken, string[], void, SigninRequestPayload>
    verb="POST"
    path={`/api/Signin`}
    {...props}
  />
);

export type UseSigninSigninProps = Omit<UseMutateProps<AccessToken, void, SigninRequestPayload>, "path" | "verb">;

export const useSigninSignin = (props: UseSigninSigninProps) => useMutate<AccessToken, string[], void, SigninRequestPayload>("POST", `/api/Signin`, props);


export type SignupCustomerProps = Omit<MutateProps<string, string[], void, SignupRequestPayload>, "path" | "verb">;

export const SignupCustomer = (props: SignupCustomerProps) => (
  <Mutate<string, string[], void, SignupRequestPayload>
    verb="POST"
    path={`/api/Signup/customer`}
    {...props}
  />
);

export type UseSignupCustomerProps = Omit<UseMutateProps<string, void, SignupRequestPayload>, "path" | "verb">;

export const useSignupCustomer = (props: UseSignupCustomerProps) => useMutate<string, string[], void, SignupRequestPayload>("POST", `/api/Signup/customer`, props);


export type SignupAdministatorProps = Omit<MutateProps<string, string[], void, SignupRequestPayload>, "path" | "verb">;

export const SignupAdministator = (props: SignupAdministatorProps) => (
  <Mutate<string, string[], void, SignupRequestPayload>
    verb="POST"
    path={`/api/Signup/administrator`}
    {...props}
  />
);

export type UseSignupAdministatorProps = Omit<UseMutateProps<string, void, SignupRequestPayload>, "path" | "verb">;

export const useSignupAdministator = (props: UseSignupAdministatorProps) => useMutate<string, string[], void, SignupRequestPayload>("POST", `/api/Signup/administrator`, props);


export interface VideoUploadQueryParams {
  Category?: string;
}

export type VideoUploadProps = Omit<MutateProps<string, string, VideoUploadQueryParams, Multimedia>, "path" | "verb">;

export const VideoUpload = (props: VideoUploadProps) => (
  <Mutate<string, string, VideoUploadQueryParams, Multimedia>
    verb="POST"
    path={`/api/Video`}
    {...props}
  />
);

export type UseVideoUploadProps = Omit<UseMutateProps<string, VideoUploadQueryParams, Multimedia>, "path" | "verb">;

export const useVideoUpload = (props: UseVideoUploadProps) => useMutate<string, string, VideoUploadQueryParams, Multimedia>("POST", `/api/Video`, props);


export type VideoFileProps = Omit<GetProps<string, string, void>, "path"> & {name: string};

export const VideoFile = ({name, ...props}: VideoFileProps) => (
  <Get<string, string, void>
    path={`/api/Video/${name}`}
    {...props}
  />
);

export type UseVideoFileProps = Omit<UseGetProps<string, void>, "path"> & {name: string};

export const useVideoFile = ({name, ...props}: UseVideoFileProps) => useGet<string, string, void>(`/api/Video/${name}`, props);


export type VideoCommentsGetVideoCommentsProps = Omit<GetProps<VideoComment[], unknown, void>, "path">;

export const VideoCommentsGetVideoComments = (props: VideoCommentsGetVideoCommentsProps) => (
  <Get<VideoComment[], unknown, void>
    path={`/api/VideoComments`}
    {...props}
  />
);

export type UseVideoCommentsGetVideoCommentsProps = Omit<UseGetProps<VideoComment[], void>, "path">;

export const useVideoCommentsGetVideoComments = (props: UseVideoCommentsGetVideoCommentsProps) => useGet<VideoComment[], unknown, void>(`/api/VideoComments`, props);


export type VideoCommentsPostVideoCommentProps = Omit<MutateProps<void, unknown, void, VideoComment>, "path" | "verb">;

export const VideoCommentsPostVideoComment = (props: VideoCommentsPostVideoCommentProps) => (
  <Mutate<void, unknown, void, VideoComment>
    verb="POST"
    path={`/api/VideoComments`}
    {...props}
  />
);

export type UseVideoCommentsPostVideoCommentProps = Omit<UseMutateProps<void, void, VideoComment>, "path" | "verb">;

export const useVideoCommentsPostVideoComment = (props: UseVideoCommentsPostVideoCommentProps) => useMutate<void, unknown, void, VideoComment>("POST", `/api/VideoComments`, props);


export type VideoCommentsGetVideoCommentProps = Omit<GetProps<void, unknown, void>, "path"> & {id: number};

export const VideoCommentsGetVideoComment = ({id, ...props}: VideoCommentsGetVideoCommentProps) => (
  <Get<void, unknown, void>
    path={`/api/VideoComments/${id}`}
    {...props}
  />
);

export type UseVideoCommentsGetVideoCommentProps = Omit<UseGetProps<void, void>, "path"> & {id: number};

export const useVideoCommentsGetVideoComment = ({id, ...props}: UseVideoCommentsGetVideoCommentProps) => useGet<void, unknown, void>(`/api/VideoComments/${id}`, props);


export type VideoCommentsPutVideoCommentProps = Omit<MutateProps<void, unknown, void, VideoComment>, "path" | "verb"> & {id: number};

export const VideoCommentsPutVideoComment = ({id, ...props}: VideoCommentsPutVideoCommentProps) => (
  <Mutate<void, unknown, void, VideoComment>
    verb="PUT"
    path={`/api/VideoComments/${id}`}
    {...props}
  />
);

export type UseVideoCommentsPutVideoCommentProps = Omit<UseMutateProps<void, void, VideoComment>, "path" | "verb"> & {id: number};

export const useVideoCommentsPutVideoComment = ({id, ...props}: UseVideoCommentsPutVideoCommentProps) => useMutate<void, unknown, void, VideoComment>("PUT", `/api/VideoComments/${id}`, props);


export type VideoCommentsDeleteVideoCommentProps = Omit<MutateProps<void, unknown, void, string>, "path" | "verb">;

export const VideoCommentsDeleteVideoComment = (props: VideoCommentsDeleteVideoCommentProps) => (
  <Mutate<void, unknown, void, string>
    verb="DELETE"
    path={`/api/VideoComments`}
    {...props}
  />
);

export type UseVideoCommentsDeleteVideoCommentProps = Omit<UseMutateProps<void, void, string>, "path" | "verb">;

export const useVideoCommentsDeleteVideoComment = (props: UseVideoCommentsDeleteVideoCommentProps) => useMutate<void, unknown, void, string>("DELETE", `/api/VideoComments`, props);


export type VideosGetVideosProps = Omit<GetProps<Video[], unknown, void>, "path">;

export const VideosGetVideos = (props: VideosGetVideosProps) => (
  <Get<Video[], unknown, void>
    path={`/api/Videos`}
    {...props}
  />
);

export type UseVideosGetVideosProps = Omit<UseGetProps<Video[], void>, "path">;

export const useVideosGetVideos = (props: UseVideosGetVideosProps) => useGet<Video[], unknown, void>(`/api/Videos`, props);


export type VideosPostVideoProps = Omit<MutateProps<void, unknown, void, Video>, "path" | "verb">;

export const VideosPostVideo = (props: VideosPostVideoProps) => (
  <Mutate<void, unknown, void, Video>
    verb="POST"
    path={`/api/Videos`}
    {...props}
  />
);

export type UseVideosPostVideoProps = Omit<UseMutateProps<void, void, Video>, "path" | "verb">;

export const useVideosPostVideo = (props: UseVideosPostVideoProps) => useMutate<void, unknown, void, Video>("POST", `/api/Videos`, props);


export type VideosGetVideoProps = Omit<GetProps<void, unknown, void>, "path"> & {id: number};

export const VideosGetVideo = ({id, ...props}: VideosGetVideoProps) => (
  <Get<void, unknown, void>
    path={`/api/Videos/${id}`}
    {...props}
  />
);

export type UseVideosGetVideoProps = Omit<UseGetProps<void, void>, "path"> & {id: number};

export const useVideosGetVideo = ({id, ...props}: UseVideosGetVideoProps) => useGet<void, unknown, void>(`/api/Videos/${id}`, props);


export type VideosPutVideoProps = Omit<MutateProps<void, unknown, void, Video>, "path" | "verb"> & {id: number};

export const VideosPutVideo = ({id, ...props}: VideosPutVideoProps) => (
  <Mutate<void, unknown, void, Video>
    verb="PUT"
    path={`/api/Videos/${id}`}
    {...props}
  />
);

export type UseVideosPutVideoProps = Omit<UseMutateProps<void, void, Video>, "path" | "verb"> & {id: number};

export const useVideosPutVideo = ({id, ...props}: UseVideosPutVideoProps) => useMutate<void, unknown, void, Video>("PUT", `/api/Videos/${id}`, props);


export type VideosDeleteVideoProps = Omit<MutateProps<void, unknown, void, string>, "path" | "verb">;

export const VideosDeleteVideo = (props: VideosDeleteVideoProps) => (
  <Mutate<void, unknown, void, string>
    verb="DELETE"
    path={`/api/Videos`}
    {...props}
  />
);

export type UseVideosDeleteVideoProps = Omit<UseMutateProps<void, void, string>, "path" | "verb">;

export const useVideosDeleteVideo = (props: UseVideosDeleteVideoProps) => useMutate<void, unknown, void, string>("DELETE", `/api/Videos`, props);

